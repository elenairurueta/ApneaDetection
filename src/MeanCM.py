from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import numpy as np
from Imports import *

# mean_cm_acum_best = [ 
#     [[379.0, 76.0], [20.20, 14.80]],
#     [[376.20, 80.80], [20.40, 15.60]],
#     [[364.80, 87.20], [16.60, 19.40]],
#     [[302.60, 137.40], [5.80, 27.20]],
#     [[261.00, 189.00], [13.80, 22.20]], 
#     [[345.00, 124.00], [11.20, 26.80]],
#     [[318.80, 140.20], [8.40, 25.60]],
#     [[311.20, 143.80], [11.80, 25.20]],
#     [[308.00, 147.00], [10.80, 23.20]],
#     [[369.00, 86.00], [12.80, 24.20]]
# ]
# std_cm_acum_best = [ 
#     [[16.94, 16.94], [1.17, 1.17]],
#     [[18.12, 18.12], [3.14, 3.14]],
#     [[24.61, 24.61], [3.07, 3.07]],
#     [[54.06, 54.06], [3.54, 3.54]],
#     [[26.13, 26.13], [1.94, 1.94]],
#     [[71.28, 71.28], [4.07, 4.07]],
#     [[29.75, 29.75], [2.50, 2.50]],
#     [[17.74, 17.74], [2.23, 2.23]],
#     [[24.31, 24.31], [2.93, 2.93]],
#     [[17.85, 17.85], [2.56, 2.56]]
# ]

# mean_metrics_best = {
#     'Accuracy': [0.8060, 0.7940, 0.7860, 0.6980, 0.5840, 0.7320, 0.6980, 0.6840, 0.6760, 0.8000], 
#     'Precision': [0.1680, 0.1640, 0.1860, 0.1800, 0.1040, 0.2080, 0.1580, 0.1500, 0.1380, 0.2240], 
#     'Sensitivity': [0.4240, 0.4300, 0.5380, 0.8260, 0.6180, 0.7060, 0.7540, 0.6800, 0.6840, 0.6540], 
#     'Specificity': [0.8320, 0.8220, 0.8060, 0.6900, 0.5780, 0.7360, 0.6940, 0.6860, 0.6760, 0.8120], 
#     'F1': [0.236, 0.236, 0.274, 0.288, 0.182, 0.310, 0.260, 0.246, 0.228, 0.330], 
#     'MCC': [0.172, 0.168, 0.222, 0.288, 0.104, 0.280, 0.244, 0.202, 0.190, 0.296]
#     }
# std_metrics_best = {
#     'Accuracy': [0.0320, 0.0314, 0.0445, 0.1103, 0.0524, 0.1323, 0.0538, 0.0344, 0.0459, 0.0310], 
#     'Precision': [0.0299, 0.0150, 0.0206, 0.0447, 0.0102, 0.0714, 0.0183, 0.0126, 0.0133, 0.0224], 
#     'Sensitivity': [0.0350, 0.0867, 0.0875, 0.1063, 0.0508, 0.1050, 0.0703, 0.0593, 0.0845, 0.0700], 
#     'Specificity': [0.0387, 0.0407, 0.0554, 0.1244, 0.0591, 0.1505, 0.0671, 0.0393, 0.0516, 0.0402], 
#     'F1': [0.024, 0.021, 0.021, 0.054, 0.017, 0.077, 0.017, 0.014, 0.013, 0.023], 
#     'MCC': [0.029, 0.028, 0.025, 0.048, 0.027, 0.073, 0.012, 0.021, 0.023, 0.022]
#     }

# mean_cm_acum_best = [
#     [[622.6,328.4],[21.6,30.4]],
#     [[671.6,282.4],[21.2,32.8]],
#     [[476.2,469.8],[16.4,37.6]],
#     [[666.,252. ],[19.2,30.8]],
#     [[518.,421.],[19.8,34.2]], 
#     [[515.8,466.2], [ 17.,39. ]],
#     [[615.8,342.2], [ 16.4,34.6]],
#     [[654.4,296.6], [ 20.6,35.4]],
#     [[812.,140. ], [ 26.4,23.6]],
#     [[459.6,492.4], [ 12.2,41.8]]

# ]
# std_cm_acum_best = [
#     [[62.79044513,62.79044513], [4.67332858,4.67332858]],
#     [[127.55798681,127.55798681], [6.52380257,6.52380257]],
#     [[55.05052225,55.05052225],[1.74355958,1.74355958]],
#     [[174.09537616,174.09537616],[10.47664068,10.47664068]],
#     [[103.04368006,103.04368006],[ 4.48998886 ,4.48998886]],
#     [[109.21062219,109.21062219],[  4.51663592 ,4.51663592]],
#     [[119.38073546,119.38073546], [  5.08330601,5.08330601]],
#     [[92.96364881,92.96364881], [ 4.54312668,4.54312668]],
#     [[81.72881989,81.72881989], [ 8.35703297,8.35703297]],
#     [[132.11298195,132.11298195], [  6.49307323 ,6.49307323]]
# ]

# mean_metrics_best = {
#     'Accuracy': [0.65, 0.7, 0.512, 0.72, 0.558, 0.5359999999999999, 
#                  0.644, 0.686, 0.834, 0.49799999999999994], 
#     'Precision': [0.088, 
#                   0.11600000000000002, 
#                   0.07400000000000001, 
#                   0.13999999999999999, 
#                   0.076, 
#                   0.078, 
#                   0.096, 
#                   0.11199999999999999, 
#                   0.16, 
#                   0.08
#                   ], 
#     'Sensitivity': [0.5860000000000001, 
#                     0.608, 
#                     0.698, 
#                     0.616, 
#                     0.634, 
#                     0.696, 
#                     0.6799999999999999, 
#                     0.6319999999999999, 
#                     0.4720000000000001, 
#                     0.776
#                     ], 
#     'Specificity': [0.6519999999999999, 
#                     0.704, 
#                     0.5039999999999999, 
#                     0.728, 
#                     0.552, 
#                     0.524, 
#                     0.6399999999999999,
#                     0.686,
#                     0.852, 
#                     0.48200000000000004
#                     ], 
#     'F1': [0.14800000000000002, 
#            0.19, 
#            0.136, 
#            0.21000000000000002, 
#            0.136, 
#            0.14400000000000002, 
#            0.168,
#            0.188,
#            0.22400000000000003,
#            0.146
#            ], 
#     'MCC': [0.11399999999999999, 
#             0.162, 
#             0.09, 
#             0.192, 
#             0.086, 
#             0.10200000000000001,
#             0.152,
#             0.16,
#             0.2,
#             0.122
#             ]
#     }
# std_metrics_best = {
#     'Accuracy': [0.0596657355607052, 
#                  0.12409673645990857, 
#                  0.05114684741017767, 
#                  0.16721243972862784, 
#                  0.10225458424931375, 
#                  0.10190191362285597, 
#                  0.11394735626595293,
#                  0.08845337754998392, 
#                  0.07499333303701071, 
#                  0.12781236246936364
#                  ], 
#     'Precision': [0.007483314773547883, 
#                   0.034985711369071804, 
#                   0.004898979485566354, 
#                   0.05215361924162119, 
#                   0.011999999999999999, 
#                   0.011661903789690599, 
#                   0.020591260281974,
#                   0.022271057451320086, 
#                   0.03346640106136302, 
#                   0.012649110640673518
#                   ], 
#     'Sensitivity': [0.0902441133814278, 
#                     0.12106196760337246, 
#                     0.030594117081556703, 
#                     0.2095328136593407, 
#                     0.08404760555780279, 
#                     0.0801498596380555,
#                     0.09838699100999074,
#                     0.08304215796810681, 
#                     0.16714065932620942, 
#                     0.11909659944767523
#                     ], 
#     'Specificity': [0.06615134163416493, 
#                     0.1351443672522092, 
#                     0.057827329179203836, 
#                     0.1900947132352712, 
#                     0.1085172797300043, 
#                     0.11128342194594844, 
#                     0.12409673645990857,
#                     0.09911609354691095,
#                     0.084, 
#                     0.13760813929415655
#                     ], 
#     'F1': [0.013266499161421601, 
#            0.05059644256269407, 
#            0.007999999999999997, 
#            0.04690415759823429, 
#            0.019595917942265426,
#            0.017435595774162697, 
#            0.02638181191654583,
#            0.02993325909419153,
#            0.03555277766926236, 
#            0.020591260281973996
#            ], 
#     'MCC': [0.02154065922853802, 
#             0.06493073232299171, 
#             0.012649110640673518, 
#             0.033704599092705435,
#             0.03611094017053558, 
#             0.029933259094191523,
#             0.025612496949731396,
#             0.0303315017762062,
#             0.0322490309931942,
#             0.03124099870362661
#             ]
#     }

# mean_cm_acum_np = np.array(mean_cm_acum_best)
# std_cm_acum_np = np.array(std_cm_acum_best)

# mean_final = np.mean(mean_cm_acum_np, axis=0)
# std_final = np.sqrt(np.mean(std_cm_acum_np**2, axis=0) + np.var(mean_cm_acum_np, axis=0))

# fig, ax = plt.subplots(figsize=(13, 6))
# cm_norm = mean_final.astype('float') / mean_final.sum(axis=1)[:, np.newaxis] * 100
# cm_display = ConfusionMatrixDisplay(confusion_matrix=cm_norm, display_labels=['without apnea', 'with apnea'])
# cm_display.plot(cmap='Blues', ax=ax)
# for text in ax.texts:
#     text.set_visible(False)
# for i in range(mean_final.shape[0]):
#     for j in range(mean_final.shape[1]):
#         text = ax.text(j, i, f'{mean_final[i, j]:.2f} ± {std_final[i, j]:.2f}', ha='center', va='center', color='black')
# ax.set_title("Confusion Matrix Best")

# mean_metrics = {}
# std_metrics = {}
# for metric in mean_metrics_best.keys():
#     mean_values = np.array(mean_metrics_best[metric])
#     std_values = np.array(std_metrics_best[metric])
#     mean_final = np.mean(mean_values)
#     std_final = np.sqrt(np.mean(std_values**2) + np.var(mean_values))
#     mean_metrics[metric] = mean_final
#     std_metrics[metric] = std_final



# metric_text = (f"Accuracy: ({mean_metrics['Accuracy']*100:.2f}±{std_metrics['Accuracy']*100:.2f})%\n"
#             f"Precision: ({mean_metrics['Precision']*100:.2f}±{std_metrics['Precision']*100:.2f})%\n"
#             f"Sensitivity: ({mean_metrics['Sensitivity']*100:.2f}±{std_metrics['Sensitivity']*100:.2f})%\n"
#             f"Specificity: ({mean_metrics['Specificity']*100:.2f}±{std_metrics['Specificity']*100:.2f})%\n"
#             f"F1: ({mean_metrics['F1']:.3f}±{std_metrics['F1']:.3f})\n"
#             f"MCC: ({mean_metrics['MCC']:.3f}±{std_metrics['MCC']:.3f})")
# plt.gcf().text(0.1, 0.1, metric_text, ha='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.8, edgecolor='gray'))

# models_path = '/media/elena/Externo/models'

# if os.path.exists(models_path):
#     if not os.path.exists(models_path + '/FINAL_CrossVal2'): 
#         os.makedirs(models_path + '/FINAL_CrossVal2') 
#     PATH = models_path + '/FINAL_CrossVal2/' + 'FINAL_CrossVal2_cm_metrics_mean_best.png'
#     plt.savefig(PATH)
# plt.close()





# mean_cm_acum_final = [ 
#     [[323.40, 131.60], [15.60, 19.40]],
#     [[309.60, 147.40], [16.20, 19.80]],
#     [[288.20, 163.80], [10.00, 26.00]],
#     [[278.60, 161.40], [4.00, 29.00]],
#     [[268.40, 181.60], [15.60, 20.40]],
#     [[278.60, 190.40], [11.00, 27.00]],
#     [[268.60, 190.40], [6.60, 27.40]],
#     [[314.60, 140.40], [11.80, 25.20]],
#     [[304.40, 150.60], [11.60, 22.40]],
#     [[304.60, 150.40], [11.40, 25.60]]
# ]

# std_cm_acum_final = [ 
#     [[7.00, 7.00], [0.80, 0.80]],
#     [[19.33, 19.33], [1.60, 1.60]],
#     [[12.29, 12.29], [0.63, 0.63]],
#     [[13.06, 13.06], [13.06, 13.06]],
#     [[25.87, 25.87], [3.38, 3.38]],
#     [[22.97, 22.97], [2.10, 2.10]],
#     [[43.43, 43.43], [2.50, 2.50]],
#     [[17.06, 17.06], [2.86, 2.86]],
#     [[7.39, 7.39], [0.80, 0.80]],
#     [[20.31, 20.31], [2.06, 2.06]]
# ]

# mean_metrics_final = {
#     'Accuracy': [0.6980, 0.6700, 0.6420, 0.6480, 0.5940, 0.6040, 0.6000, 0.6920, 0.6680, 0.6720], 
#     'Precision': [0.1280, 0.1200, 0.1380, 0.1520, 0.1020, 0.1280, 0.1280, 0.1500, 0.1300, 0.1460], 
#     'Sensitivity': [0.5520, 0.5520, 0.7200, 0.8800, 0.5680, 0.7100, 0.8060, 0.6800, 0.6620, 0.6920], 
#     'Specificity': [0.7080, 0.6760, 0.6360, 0.6320, 0.5960, 0.5940, 0.5880, 0.6900, 0.6700, 0.6680], 
#     'F1': [0.210, 0.198, 0.232, 0.260, 0.172, 0.212, 0.222, 0.250, 0.216, 0.240], 
#     'MCC': [0.148, 0.124, 0.194, 0.270, 0.088, 0.164, 0.204, 0.208, 0.174, 0.200]
#     }
# std_metrics_final = {
#     'Accuracy': [0.0147, 0.0395, 0.0264, 0.0248, 0.0476, 0.0445, 0.0829, 0.0293, 0.0160, 0.0371], 
#     'Precision': [0.0075, 0.0179, 0.0098, 0.0098, 0.0117, 0.0133, 0.0172, 0.0063, 0.0089, 0.0102], 
#     'Sensitivity': [0.0240, 0.0453, 0.0190, 0.0424, 0.0937, 0.0573, 0.0703, 0.0756, 0.0240, 0.0578], 
#     'Specificity': [0.0147, 0.0408, 0.0287, 0.0306, 0.0589, 0.0500, 0.0945, 0.0363, 0.0167, 0.0449], 
#     'F1': [0.009, 0.025, 0.013, 0.260, 0.013, 0.015, 0.017, 0.020, 0.009, 0.012, 0.011], 
#     'MCC': [0.015, 0.036, 0.020, 0.270, 0.021, 0.031, 0.027, 0.024, 0.019, 0.014, 0.011]
#     }

mean_cm_acum_final = [ 
    [[579.8,371.2], [ 18.8, 33.2]],
    [[590.4,363.6], [ 21.8, 32.2]],
    [[535.2,410.8], [ 20.4, 33.6]],
    [[545.8,372.2], [ 11.2,38.8]],
    [[586.8,352.2], [ 24.8,29.2]],
    [[565.4,416.6], [ 18.6,37.4]],
    [[591.8,366.2], [ 18.,33. ]],
    [[618.8,332.2], [ 17.8,38.2]],
    [[594.4,357.6], [ 14.,36. ]],
    [[587.8,364.2], [ 15.,39. ]]
]

std_cm_acum_final = [ 
    [[27.78056875,27.78056875],[ 1.32664992,1.32664992]],
    [[27.45614685,27.45614685], [ 2.48193473, 2.48193473]],
    [[20.4685124,20.4685124], [0.8,0.8]],
    [[11.77115118,11.77115118], [ 2.13541565,2.13541565]],
    [[28.20212758,28.20212758], [ 1.72046505,1.72046505]],
    [[49.61290155,49.61290155], [ 1.74355958,1.74355958]],
    [[20.29187029,20.29187029],[ 1.26491106,1.26491106]],
    [[6.52380257,6.52380257], [1.72046505,1.72046505]],
    [[32.12226642,32.12226642], [ 1.09544512,1.09544512]],
    [[9.8264948,9.8264948 ], [2.60768096,2.60768096]]
]

mean_metrics_final = {
    'Accuracy': [0.612, 0.62, 0.5680000000000001, 0.604, 0.62, 0.58, 0.6199999999999999, 0.654, 0.628, 0.624], 
    'Precision': [0.082, 0.08, 0.07600000000000001, 0.094, 0.078, 0.084, 0.08399999999999999, 
                  0.10400000000000001, 0.092, 0.096], 
    'Sensitivity': [0.636, 0.5959999999999999, 0.622, 0.776, 0.542, 0.666, 0.65, 0.682, 0.72, 0.724], 
    'Specificity': [0.612, 0.618, 0.564, 0.594, 0.624, 0.576, 0.6199999999999999, 0.652, 0.626, 0.6180000000000001], 
    'F1': [0.14600000000000002, 0.14400000000000002, 0.136, 0.168, 0.138, 0.148, 0.14800000000000002, 0.178,
           0.164, 0.17400000000000002], 
    'MCC': [0.11400000000000002, 0.1, 0.08600000000000001, 0.166, 0.076, 0.11399999999999999, 0.12, 
            0.15799999999999997, 0.154, 0.156]
    }
std_metrics_final = {
    'Accuracy': [0.029933259094191558, 0.026076809620810618, 0.015999999999999966, 0.013564659966250548,
                0.027568097504180468, 0.04472135954999579, 0.02280350850198278, 0.008000000000000007,
                0.03429285639896448, 0.008000000000000007], 
    'Precision': [0.007483314773547879, 0.006324555320336755, 0.004898979485566353, 0.008000000000000002,
                 0.007483314773547879, 0.007999999999999997, 0.004898979485566353, 0.004898979485566354,
                 0.009797958971132713, 0.00489897948556636], 
    'Sensitivity': [0.023323807579381222, 0.04630334761116091, 0.016000000000000014, 0.04270831300812526,
                    0.03124099870362661, 0.03199999999999997, 0.02529822128134702, 0.0312409987036266,
                    0.021908902300206624, 0.047581509013481287], 
    'Specificity': [0.029933259094191558, 0.02925747767665561, 0.02059126028197397, 0.013564659966250548,
                    0.029393876913398165, 0.052000000000000005, 0.02280350850198278, 0.007483314773547889,
                    0.03382306905057551, 0.00979795897113272], 
    'F1': [0.010198039027185567, 0.013564659966250538, 0.00489897948556636, 0.011661903789690599,
           0.011661903789690599, 0.011661903789690599, 0.011661903789690599, 0.007483314773547877,
           0.014966629547095768, 0.007999999999999995], 
    'MCC': [0.014966629547095768, 0.022803508501982764, 0.007999999999999995, 0.01959591794226542,
            0.0233238075793812, 0.01624807680927192, 0.01788854381999832, 0.014696938456699067,
            0.026532998322843202, 0.02244994432064365]
    }


mean_cm_acum_np = np.array(mean_cm_acum_final)
std_cm_acum_np = np.array(std_cm_acum_final)

mean_final = np.mean(mean_cm_acum_np, axis=0)
std_final = np.sqrt(np.mean(std_cm_acum_np**2, axis=0) + np.var(mean_cm_acum_np, axis=0))

fig, ax = plt.subplots(figsize=(13, 6))
cm_norm = mean_final.astype('float') / mean_final.sum(axis=1)[:, np.newaxis] * 100
cm_display = ConfusionMatrixDisplay(confusion_matrix=cm_norm, display_labels=['without apnea', 'with apnea'])
cm_display.plot(cmap='Blues', ax=ax)
for text in ax.texts:
    text.set_visible(False)
for i in range(mean_final.shape[0]):
    for j in range(mean_final.shape[1]):
        text = ax.text(j, i, f'{mean_final[i, j]:.2f} ± {std_final[i, j]:.2f}', ha='center', va='center', color='black')
ax.set_title("Confusion Matrix Final")

mean_metrics = {}
std_metrics = {}
for metric in mean_metrics_final.keys():
    mean_values = np.array(mean_metrics_final[metric])
    std_values = np.array(std_metrics_final[metric])
    mean_final = np.mean(mean_values)
    std_final = np.sqrt(np.mean(std_values**2) + np.var(mean_values))
    mean_metrics[metric] = mean_final
    std_metrics[metric] = std_final



metric_text = (f"Accuracy: ({mean_metrics['Accuracy']*100:.2f}±{std_metrics['Accuracy']*100:.2f})%\n"
            f"Precision: ({mean_metrics['Precision']*100:.2f}±{std_metrics['Precision']*100:.2f})%\n"
            f"Sensitivity: ({mean_metrics['Sensitivity']*100:.2f}±{std_metrics['Sensitivity']*100:.2f})%\n"
            f"Specificity: ({mean_metrics['Specificity']*100:.2f}±{std_metrics['Specificity']*100:.2f})%\n"
            f"F1: ({mean_metrics['F1']:.3f}±{std_metrics['F1']:.3f})\n"
            f"MCC: ({mean_metrics['MCC']:.3f}±{std_metrics['MCC']:.3f})")
plt.gcf().text(0.1, 0.1, metric_text, ha='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.8, edgecolor='gray'))

models_path = '/media/elena/Externo/models'

if os.path.exists(models_path):
    if not os.path.exists(models_path + '/FINAL_CrossVal2'): 
        os.makedirs(models_path + '/FINAL_CrossVal2') 
    PATH = models_path + '/FINAL_CrossVal2/' + 'FINAL_CrossVal2_cm_metrics_mean_final.png'
    plt.savefig(PATH)
plt.close()